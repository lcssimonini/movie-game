plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.2'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'jacoco'
	id 'com.diffplug.spotless' version '6.9.0'
	id 'com.avast.gradle.docker-compose' version '0.16.8'
	id 'org.sonarqube' version '3.2.0'
	id 'org.liquibase.gradle' version '2.1.1'
}

group = 'com.ada'
version = '0.0.1-SNAPSHOT'

compileJava {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	enabled = false
}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2022.0.0")
	set('testcontainersVersion', "1.17.6")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'com.github.gavlyukovskiy:datasource-proxy-spring-boot-starter:1.8.1'
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
	implementation group: 'org.apache.commons', name: 'commons-csv', version: '1.8'

	implementation 'org.springdoc:springdoc-openapi-ui:1.6.14'

	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

spotless {
	java {
		importOrder()
		removeUnusedImports()
		googleJavaFormat()
		indentWithSpaces()
		trimTrailingWhitespace()
		endWithNewline()
	}
}

compileJava.dependsOn spotlessApply

test {
	finalizedBy jacocoTestReport
	useJUnitPlatform()
}

jacocoTestReport {
	reports {
		xml.enabled true
		html.enabled true
	}
	dependsOn test
}

// dockerCompose.isRequiredBy(test)

// dockerCompose.isRequiredBy(bootRun)

sonarqube {
	properties {
		property "sonar.projectKey", "lcssimonini_${project.name}"
		property "sonar.organization", "lcssimonini"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.exclusions", [
				"**/com/ada/moviegame/game/domain/projection/**",
				"**/com/ada/moviegame/game/controller/dto/**",
				"**/com/ada/moviegame/game/MovieGameRepository.java",
				"**/com/ada/moviegame/configuration/**",
				"**/com/ada/moviegame/security/**",
				"**/com/ada/moviegame/exception/**",
				"**/com/ada/moviegame/imdb/**",
				"**/com/ada/moviegame/MovieGameApplication.java"
		]
	}
}
